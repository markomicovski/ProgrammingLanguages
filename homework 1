Server Java 


import java.io.*;
import java.net.*;
import java.util.*;

public class Server {
    private static ServerSocket serverSocket;
    private static HashMap<String, PrintWriter> clients;

    public static void main(String[] args) throws IOException {
        // Choose a port number
        int port = 1234;

        serverSocket = new ServerSocket(port);
        clients = new HashMap<>();

        System.out.println("Server started on port " + port);

        while (true) {
            // Accept new connection
            Socket clientSocket = serverSocket.accept();

            // Get client info
            InetAddress address = clientSocket.getInetAddress();
            String username = new BufferedReader(new InputStreamReader(clientSocket.getInputStream())).readLine();
            String dummyUrl = "http://" + address.getHostAddress() + ":8080/" + username; // Replace with a valid URL generation logic

            // Broadcast connection message
            broadcastMessage("[Server] " + username + " has joined the chat (IP: " + address.getHostAddress() + ", URL: " + dummyUrl + ")");

            // Add client to list
            clients.put(username, new PrintWriter(clientSocket.getOutputStream()));

            // Spawn thread to handle client communication
            new Thread(new ClientHandler(clientSocket, username)).start();
        }
    }

    private static void broadcastMessage(String message) {
        for (PrintWriter writer : clients.values()) {
            writer.println(message);
            writer.flush();
        }
    }
}

class ClientHandler implements Runnable {
    private Socket clientSocket;
    private String username;

    public ClientHandler(Socket clientSocket, String username) {
        this.clientSocket = clientSocket;
        this.username = username;
    }

    @Override
    public void run() {
        try {
            BufferedReader reader = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
            String message;

            while ((message = reader.readLine()) != null) {
                // Broadcast message from client
                Server.broadcastMessage("[" + username + "] " + message);
            }
        } catch (IOException e) {
            // Handle client disconnection
            System.out.println("[Server] " + username + " has disconnected.");
            Server.clients.remove(username);
            Server.broadcastMessage("[Server] " + username + " has left the chat.");
        } finally {
            try {
                clientSocket.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
}




Client Java



import java.io.*;
import java.net.*;

public class Client {
    public static void main(String[] args) throws IOException {
        // Server address and port
        String serverAddress = "localhost";
        int port = 1234;

        // Get username
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        System.out.print("Enter your username: ");
        String username = reader.readLine();

        // Connect to server
        Socket clientSocket = new Socket(serverAddress, port);

        // Send username to server
        PrintWriter writer = new PrintWriter(clientSocket.getOutputStream());
        writer.println(username);
        writer.flush();

        // Read messages from server in a separate thread
        new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    BufferedReader serverReader = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
                    String message;

                    while ((message = serverReader.readLine()) != null) {
                        System.out.println(message);
                    }
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }).start();

        // Send messages to server
        while (true) {
            String message = reader.readLine();
            writer.println(message);
            writer.flush();

            if (message.equalsIgnoreCase("EXIT")) {
                break;
            }
        }

        writer.close();
        clientSocket.close();
        System.out.println("Disconnected from server.");
    }
}
