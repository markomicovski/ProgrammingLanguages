Neznam ova dali treba 

To create the "LocalTrafficInfo" system, we need to develop both the server and the client components in Java. Let's break down the implementation into manageable parts:

Server Side: TrafficDataServer
Set Up ServerSocket: The server listens on a predefined port.
Traffic Data Management: It reads and writes traffic data from/to a local file named traffic_data.txt.
Request Handling: Processes requests for traffic information and updates from clients.
Client Side: TrafficInfoClient
Socket Connection: Connects to the server using Java's Socket class.
Request and Update Traffic Information: Requests traffic information and submits updates.
Communication Protocol
Text-Based: Uses simple text commands and responses.
Request Formats:
For information: GET_ROUTE:<RouteName>
For updates: UPDATE_ROUTE:<RouteName>:<NewTrafficStatus>
Response Formats:
For information: <RouteName>:<TrafficStatus>.
For update acknowledgment: UPDATE_SUCCESS:<RouteName> or UPDATE_FAILED:<RouteName>
Session Management: Allows multiple requests per session, with QUIT to terminate.
Additional Features
Concurrency Control: Ensures that traffic data updates do not conflict.
Error Handling: Manages invalid requests and non-existing routes.
Console-Based UI: Provides a simple interface for interaction.
Implementation
Server Implementation (TrafficDataServer.java)

Initialize ServerSocket: Open a ServerSocket on a predefined port.
Listen for Client Connections: Use a loop to accept connections.
Handle Client Requests:
Read requests from the client socket.
Process requests (GET_ROUTE, UPDATE_ROUTE).
Write responses back to the client.
Client Implementation (TrafficInfoClient.java)

Connect to Server: Open a Socket to the server.
Send Requests:
Use console input to get user commands.
Send requests to the server based on user input.
Receive and Display Responses from the server.
Shared Aspects

Data File Handling: Use FileReader and FileWriter in Java for reading and updating the traffic_data.txt file.
Concurrency Control: Synchronize file access to ensure consistency.
Sample Code Structure
This is a conceptual guide. Implementation details such as error handling and exact class/method structures are left as an exercise.
